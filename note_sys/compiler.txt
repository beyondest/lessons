
1. `add_compile_options`: 这是一个CMake函数，它用于向编译器添加编译选项。它会将后面的参数添加到编译器的选项列表中。

2. `-pipe`: 这是一个编译器选项，通常用于启用管道编译。管道编译可以提高编译速度，因为它允许编译器同时生成和优化多个文件。

3. `${MCU_FLAGS}`: 这是一个变量，它可能包含了特定于微控制器的编译选项。这个变量的值会被添加到编译选项中，以定制编译器行为，以适应特定的微控制器架构。

4. `-Wall`: 这是一个编译器选项，它启用了警告级别为所有的警告。编译器会在代码中发现潜在问题或不推荐的做法时生成警告消息。

5. `-Werror`: 这是一个编译器选项，它会将警告视为错误。这意味着如果编译器生成任何警告，编译过程将失败。

6. `-fmessage-length=0`: 这是一个编译器选项，它指定了编译器在生成错误和警告消息时的最大消息长度。将其设置为0表示不限制消息长度。

7. `-ffunction-sections` 和 `-fdata-sections`: 这些是编译器选项，它们用于生成代码和数据的节（sections），这对于优化和减小生成的可执行文件的大小非常有用。这些选项将函数和数据放入单独的节中，使链接器能够更好地进行优化和去除未使用的代码和数据。

8. `-fno-common`: 这是一个编译器选项，它禁用了C语言中全局变量的共享内存分配。这可以帮助在编译期间发现一些潜在的问题，但也可能导致一些不兼容的问题，因为它不允许默认的行为。


-lm -lc -lnosys: 这些是链接器选项，用于指定要链接的库。通常，-lm用于数学库，-lc用于C标准库，-lnosys可能是一个自定义库，或者是一个没有标准系统调用的库。

-Wl,--gc-sections: 这是一个链接器选项，用于告诉链接器去除未使用的代码和数据节。这可以减小生成的可执行文件的大小。

-flto: 这是一个编译器选项，它用于启用链接时优化（Link-Time Optimization，LTO），它允许编译器在链接阶段进行更多的优化，以生成更高效的代码。

-specs=nano.specs -specs=nosys.specs: 这些选项用于指定链接器规范文件，它们包含了运行时库的信息和链接时的一些配置。nano.specs通常用于嵌入式系统，它包含了一些精简的运行时库，而nosys.specs可能用于禁用标准系统调用的链接。

-Wl,-Map=${CMAKE_BINARY_DIR}/${PROJECT_NAME}.map: 这个选项告诉链接器生成一个地图文件，其中包含了可执行文件的段布局和符号信息。这对于调试和性能分析很有用。

-Wl,--cref -Wl,--print-memory-usage: 这些选项用于生成关于内存使用情况的报告。--cref选项生成交叉引用信息，而--print-memory-usage选项生成内存使用的详细信息。


注意要在c++的json里添加宏定义
名称规则cbt6
引脚数-flash容量-封装方式-工作温度



