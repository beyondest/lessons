JSON（JavaScript Object Notation）的语法是相对简单的，它由键值对构成，通常用于表示数据。以下是JSON的详细语法规则：

1. **数据类型**：JSON支持以下数据类型：
   - **字符串**：必须使用双引号括起来，例如 `"name": "John"`。
   - **数字**：可以是整数或浮点数，例如 `"age": 30` 或 `"price": 19.99`。
   - **布尔值**：`true` 或 `false`。
   - **null**：表示空值。
   - **数组**：有序的值列表，使用方括号 `[]`，例如 `"colors": ["red", "green", "blue"]`。
   - **对象**：无序的键值对集合，使用花括号 `{}`，例如 `"address": {"street": "123 Main St", "city": "Anytown"}`。

2. **键值对**：JSON对象由一组键值对组成，键和值之间使用冒号 `:` 分隔，键必须是字符串，值可以是任何JSON数据类型。键值对之间使用逗号 `,` 分隔。

   ```json
   {
     "name": "John",
     "age": 30,
     "isStudent": false
   }
   ```

3. **对象**：JSON对象由花括号 `{}` 包围，键值对在其中定义。对象中的键必须是唯一的。

4. **数组**：JSON数组由方括号 `[]` 包围，其中包含一个或多个值，值之间使用逗号 `,` 分隔。

   ```json
   "colors": ["red", "green", "blue"]
   ```

5. **嵌套**：JSON允许嵌套，即在对象或数组中可以包含其他对象或数组。

   ```json
   "person": {
     "name": "John",
     "address": {
       "street": "123 Main St",
       "city": "Anytown"
     }
   }
   ```

6. **空白**：JSON可以包含空白字符（空格、制表符、换行符等），但它们对数据的含义没有影响。

7. **注释**：JSON不支持注释，不能在JSON中添加注释。

8. **Unicode字符**：JSON支持Unicode字符，因此可以包含各种语言的文本。

9. **严格的引号**：JSON要求使用双引号来括住字符串。单引号无效。

JSON的语法非常严格，任何不符合规范的格式都将导致解析错误。JSON通常用于数据交换和配置文件中，因为它易于读取和编写，同时也广泛支持各种编程语言。 JSON的简单性和通用性使其成为一个非常流行的数据交换格式。